open IslMap_Core

module Make (Ctx: IslCtx.SIG): IslMap_sigs.S with module Types := Types = struct
    module Types = Types

    let find_dim_by_id = find_dim_by_id Ctx.ctx
    let find_dim_by_name = find_dim_by_name Ctx.ctx
    let n_basic_map = n_basic_map Ctx.ctx
    let dim = dim Ctx.ctx
    let fix_input_si = fix_input_si Ctx.ctx
    let remove_inputs = remove_inputs Ctx.ctx
    let dump = dump Ctx.ctx
    let get_dim_name = get_dim_name Ctx.ctx
    let get_tuple_name = get_tuple_name Ctx.ctx
    let is_translation = is_translation Ctx.ctx
    let domain = domain Ctx.ctx
    let params = params Ctx.ctx
    let range = range Ctx.ctx
    let wrap = wrap Ctx.ctx
    let get_space = get_space Ctx.ctx
    let add_constraint = add_constraint Ctx.ctx
    let add_dims = add_dims Ctx.ctx
    let align_params = align_params Ctx.ctx
    let compute_divs = compute_divs Ctx.ctx
    let curry = curry Ctx.ctx
    let deltas_map = deltas_map Ctx.ctx
    let domain_factor_domain = domain_factor_domain Ctx.ctx
    let domain_factor_range = domain_factor_range Ctx.ctx
    let domain_map = domain_map Ctx.ctx
    let domain_product = domain_product Ctx.ctx
    let drop_constraints_involving_dims = drop_constraints_involving_dims Ctx.ctx
    let drop_constraints_not_involving_dims = drop_constraints_not_involving_dims Ctx.ctx
    let drop_unused_params = drop_unused_params Ctx.ctx
    let eliminate = eliminate Ctx.ctx
    let empty = empty Ctx.ctx
    let equate = equate Ctx.ctx
    let factor_domain = factor_domain Ctx.ctx
    let factor_range = factor_range Ctx.ctx
    let fix_si = fix_si Ctx.ctx
    let fix_val = fix_val Ctx.ctx
    let fixed_power_val = fixed_power_val Ctx.ctx
    let flat_domain_product = flat_domain_product Ctx.ctx
    let flat_product = flat_product Ctx.ctx
    let flat_range_product = flat_range_product Ctx.ctx
    let floordiv_val = floordiv_val Ctx.ctx
    let from_aff = from_aff Ctx.ctx
    let from_domain = from_domain Ctx.ctx
    let from_domain_and_range = from_domain_and_range Ctx.ctx
    let from_range = from_range Ctx.ctx
    let from_union_map = from_union_map Ctx.ctx
    let gist_basic_map = gist_basic_map Ctx.ctx
    let gist_params = gist_params Ctx.ctx
    let gist_range = gist_range Ctx.ctx
    let identity = identity Ctx.ctx
    let insert_dims = insert_dims Ctx.ctx
    let intersect_domain_factor_range = intersect_domain_factor_range Ctx.ctx
    let intersect_range_factor_range = intersect_range_factor_range Ctx.ctx
    let lex_ge = lex_ge Ctx.ctx
    let lex_ge_first = lex_ge_first Ctx.ctx
    let lex_ge_map = lex_ge_map Ctx.ctx
    let lex_gt = lex_gt Ctx.ctx
    let lex_gt_first = lex_gt_first Ctx.ctx
    let lex_gt_map = lex_gt_map Ctx.ctx
    let lex_le = lex_le Ctx.ctx
    let lex_le_first = lex_le_first Ctx.ctx
    let lex_le_map = lex_le_map Ctx.ctx
    let lex_lt = lex_lt Ctx.ctx
    let lex_lt_first = lex_lt_first Ctx.ctx
    let lex_lt_map = lex_lt_map Ctx.ctx
    let lower_bound_si = lower_bound_si Ctx.ctx
    let make_disjoint = make_disjoint Ctx.ctx
    let move_dims = move_dims Ctx.ctx
    let nat_universe = nat_universe Ctx.ctx
    let neg = neg Ctx.ctx
    let oppose = oppose Ctx.ctx
    let order_ge = order_ge Ctx.ctx
    let order_gt = order_gt Ctx.ctx
    let order_le = order_le Ctx.ctx
    let order_lt = order_lt Ctx.ctx
    let product = product Ctx.ctx
    let project_out = project_out Ctx.ctx
    let range_curry = range_curry Ctx.ctx
    let range_factor_domain = range_factor_domain Ctx.ctx
    let range_factor_range = range_factor_range Ctx.ctx
    let range_map = range_map Ctx.ctx
    let range_product = range_product Ctx.ctx
    let remove_dims = remove_dims Ctx.ctx
    let remove_divs = remove_divs Ctx.ctx
    let remove_divs_involving_dims = remove_divs_involving_dims Ctx.ctx
    let remove_redundancies = remove_redundancies Ctx.ctx
    let remove_unknown_divs = remove_unknown_divs Ctx.ctx
    let reset_tuple_id = reset_tuple_id Ctx.ctx
    let reset_user = reset_user Ctx.ctx
    let set_dim_id = set_dim_id Ctx.ctx
    let set_dim_name = set_dim_name Ctx.ctx
    let set_tuple_id = set_tuple_id Ctx.ctx
    let set_tuple_name = set_tuple_name Ctx.ctx
    let subtract_domain = subtract_domain Ctx.ctx
    let subtract_range = subtract_range Ctx.ctx
    let sum = sum Ctx.ctx
    let uncurry = uncurry Ctx.ctx
    let union_disjoint = union_disjoint Ctx.ctx
    let universe = universe Ctx.ctx
    let upper_bound_si = upper_bound_si Ctx.ctx
    let zip = zip Ctx.ctx
    let convex_hull = convex_hull Ctx.ctx
    let plain_unshifted_simple_hull = plain_unshifted_simple_hull Ctx.ctx
    let simple_hull = simple_hull Ctx.ctx
    let plain_get_val_if_fixed = plain_get_val_if_fixed Ctx.ctx
    let get_dim_id = get_dim_id Ctx.ctx
    let get_tuple_id = get_tuple_id Ctx.ctx
    let to_string = to_string Ctx.ctx
    let deltas = deltas Ctx.ctx
    let apply_domain = apply_domain Ctx.ctx
    let apply_range = apply_range Ctx.ctx
    let coalesce = coalesce Ctx.ctx
    let complement = complement Ctx.ctx
    let detect_equalities = detect_equalities Ctx.ctx
    let flatten = flatten Ctx.ctx
    let flatten_domain = flatten_domain Ctx.ctx
    let flatten_range = flatten_range Ctx.ctx
    let gist = gist Ctx.ctx
    let gist_domain = gist_domain Ctx.ctx
    let intersect = intersect Ctx.ctx
    let intersect_domain = intersect_domain Ctx.ctx
    let intersect_params = intersect_params Ctx.ctx
    let intersect_range = intersect_range Ctx.ctx
    let lexmax = lexmax Ctx.ctx
    let lexmin = lexmin Ctx.ctx
    let reverse = reverse Ctx.ctx
    let subtract = subtract Ctx.ctx
    let union = union Ctx.ctx
    let affine_hull = affine_hull Ctx.ctx
    let polyhedral_hull = polyhedral_hull Ctx.ctx
    let sample = sample Ctx.ctx
    let unshifted_simple_hull = unshifted_simple_hull Ctx.ctx
    let from_basic_map = from_basic_map Ctx.ctx
    let of_string = of_string Ctx.ctx
end

open IslBasicMap_Core

module Make (Ctx: IslCtx.SIG): IslBasicMap_sigs.S with module Types := Types = struct
    module Types = Types

    let find_dim_by_name = find_dim_by_name Ctx.ctx
    let n_constraint = n_constraint Ctx.ctx
    let dim = dim Ctx.ctx
    let dump = dump Ctx.ctx
    let get_dim_name = get_dim_name Ctx.ctx
    let get_tuple_name = get_tuple_name Ctx.ctx
    let get_space = get_space Ctx.ctx
    let compute_divs = compute_divs Ctx.ctx
    let add_constraint = add_constraint Ctx.ctx
    let add_dims = add_dims Ctx.ctx
    let align_params = align_params Ctx.ctx
    let curry = curry Ctx.ctx
    let deltas_map = deltas_map Ctx.ctx
    let domain_map = domain_map Ctx.ctx
    let domain_product = domain_product Ctx.ctx
    let drop_constraints_involving_dims = drop_constraints_involving_dims Ctx.ctx
    let drop_constraints_not_involving_dims = drop_constraints_not_involving_dims Ctx.ctx
    let drop_unused_params = drop_unused_params Ctx.ctx
    let eliminate = eliminate Ctx.ctx
    let empty = empty Ctx.ctx
    let equal = equal Ctx.ctx
    let equate = equate Ctx.ctx
    let fix_si = fix_si Ctx.ctx
    let fix_val = fix_val Ctx.ctx
    let flat_product = flat_product Ctx.ctx
    let flat_range_product = flat_range_product Ctx.ctx
    let from_aff = from_aff Ctx.ctx
    let from_constraint = from_constraint Ctx.ctx
    let from_domain = from_domain Ctx.ctx
    let from_domain_and_range = from_domain_and_range Ctx.ctx
    let from_range = from_range Ctx.ctx
    let gist_domain = gist_domain Ctx.ctx
    let identity = identity Ctx.ctx
    let insert_dims = insert_dims Ctx.ctx
    let less_at = less_at Ctx.ctx
    let lower_bound_si = lower_bound_si Ctx.ctx
    let more_at = more_at Ctx.ctx
    let move_dims = move_dims Ctx.ctx
    let nat_universe = nat_universe Ctx.ctx
    let neg = neg Ctx.ctx
    let order_ge = order_ge Ctx.ctx
    let order_gt = order_gt Ctx.ctx
    let product = product Ctx.ctx
    let project_out = project_out Ctx.ctx
    let range_map = range_map Ctx.ctx
    let range_product = range_product Ctx.ctx
    let remove_dims = remove_dims Ctx.ctx
    let remove_divs = remove_divs Ctx.ctx
    let remove_divs_involving_dims = remove_divs_involving_dims Ctx.ctx
    let remove_redundancies = remove_redundancies Ctx.ctx
    let set_dim_name = set_dim_name Ctx.ctx
    let set_tuple_id = set_tuple_id Ctx.ctx
    let set_tuple_name = set_tuple_name Ctx.ctx
    let sum = sum Ctx.ctx
    let uncurry = uncurry Ctx.ctx
    let universe = universe Ctx.ctx
    let upper_bound_si = upper_bound_si Ctx.ctx
    let zip = zip Ctx.ctx
    let domain = domain Ctx.ctx
    let range = range Ctx.ctx
    let wrap = wrap Ctx.ctx
    let plain_get_val_if_fixed = plain_get_val_if_fixed Ctx.ctx
    let get_div = get_div Ctx.ctx
    let to_string = to_string Ctx.ctx
    let get_local_space = get_local_space Ctx.ctx
    let lexmax = lexmax Ctx.ctx
    let lexmin = lexmin Ctx.ctx
    let union = union Ctx.ctx
    let affine_hull = affine_hull Ctx.ctx
    let apply_domain = apply_domain Ctx.ctx
    let apply_range = apply_range Ctx.ctx
    let detect_equalities = detect_equalities Ctx.ctx
    let flatten = flatten Ctx.ctx
    let flatten_domain = flatten_domain Ctx.ctx
    let flatten_range = flatten_range Ctx.ctx
    let gist = gist Ctx.ctx
    let intersect = intersect Ctx.ctx
    let intersect_domain = intersect_domain Ctx.ctx
    let intersect_range = intersect_range Ctx.ctx
    let reverse = reverse Ctx.ctx
    let sample = sample Ctx.ctx
    let deltas = deltas Ctx.ctx
    let of_string = of_string Ctx.ctx
end
